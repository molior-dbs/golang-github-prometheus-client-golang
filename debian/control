Source: golang-github-prometheus-client-golang
Maintainer: Debian Go Packaging Team <team+pkg-go@tracker.debian.org>
Uploaders: TODO <TODO>
Section: golang
Testsuite: autopkgtest-pkg-go
Priority: optional
Build-Depends: debhelper-compat (= 13),
               dh-golang,
               golang-any (> 2:1.15),
               golang-github-json-iterator-go-dev,
               git-core
Standards-Version: 4.5.0
Vcs-Browser: https://salsa.debian.org/go-team/packages/golang-github-prometheus-client-golang
Vcs-Git: https://salsa.debian.org/go-team/packages/golang-github-prometheus-client-golang.git
Homepage: https://github.com/prometheus/client_golang
Rules-Requires-Root: no
XS-Go-Import-Path: github.com/prometheus/client_golang

Package: golang-github-prometheus-client-golang-dev
Architecture: all
Depends: ${misc:Depends}
Description: Prometheus instrumentation library for Go applications (library)
 Prometheus Go client library CircleCI
 (https://circleci.com/gh/prometheus/client_golang/tree/main) Go Report
 Card (https://goreportcard.com/report/github.com/prometheus/client_golang)
 Go Reference (https://pkg.go.dev/github.com/prometheus/client_golang)
 Slack (https://slack.cncf.io/)
 .
 This is the Go (http://golang.org) client library for Prometheus
 (http://prometheus.io). It has two separate parts, one for instrumenting
 application code, and one for creating clients that talk to the Prometheus
 HTTP API.
 .
 This library requires Go1.17 or later.  Important note about
 releases and stability This repository generally follows
 Semantic Versioning (https://semver.org/). However, the API
 client in prometheus/client_golang/api/… is still considered
 experimental. Breaking changes of the API client will not trigger a
 new major release. The same is true for selected other new features
 explicitly marked as EXPERIMENTAL in CHANGELOG.md.
 .
 Features that require breaking changes in the stable parts of the
 repository are being batched up and tracked in the v2 milestone
 (https://github.com/prometheus/client_golang/milestone/2). The
 v2 development happens in a separate branch
 (https://github.com/prometheus/client_golang/tree/dev-v2) for
 the time being. v2 releases off that branch will happen once
 sufficient stability is reached. In view of the widespread use of
 this repository, v1 and v2 will coexist for a while to enable a
 convenient transition.  Instrumenting applications code-coverage
 (http://gocover.io/github.com/prometheus/client_golang/prometheus)
 Go Reference
 (https://pkg.go.dev/github.com/prometheus/client_golang/prometheus)
 .
 The prometheus directory
 (https://github.com/prometheus/client_golang/tree/main/prometheus)
 contains the instrumentation library. See the guide
 (https://prometheus.io/docs/guides/go-application/) on the Prometheus
 website to learn more about instrumenting applications.
 .
 The examples directory
 (https://github.com/prometheus/client_golang/tree/main/examples)
 contains simple examples of instrumented code.
 Client for the Prometheus HTTP API code-coverage
 (http://gocover.io/github.com/prometheus/client_golang/api/prometheus/v1)
 Go Reference (https://pkg.go.dev/github.com/prometheus/client_golang/api)
 .
 The api/prometheus directory
 (https://github.com/prometheus/client_golang/tree/main/api/prometheus)
 contains the client for the Prometheus HTTP API
 (http://prometheus.io/docs/querying/api/). It allows you to write Go
 applications that query time series data from a Prometheus server. It
 is still in alpha stage.  Where is model, extraction, and text?
 The model packages has been moved to prometheus/common/model
 (https://github.com/prometheus/common/tree/main/model).
 .
 The extraction and text packages are
 now contained in prometheus/common/expfmt
 (https://github.com/prometheus/common/tree/main/expfmt).  Contributing
 and community See the contributing guidelines (CONTRIBUTING.md) and the
 Community section (http://prometheus.io/community/) of the homepage.
 .
 client_golang community is also present on the CNCF Slack
 #prometheus-client_golang.  For Maintainers: Release Process To cut
 a minor version: • Create a new branch release-<major>.<minor>
 on top of the main commit you want to cut the version from and
 push it.• Create a new branch on top of the release branch,
 e.g. <yourname>/cut-<major>.<minor>.<patch>,• Change the VERSION
 file.• Update CHANGELOG (only user-impacting changes to mention).•
 Create PR, and get it reviewed.• Once merged, create a release with
 the release-<major>.<minor> tag on GitHub with the <version> / <date>
 title.• Announce on the prometheus-announce mailing list, slack and
 Twitter.• Merge the release branch back to the main using the "merge
 without squashing" approach (!).  NOTE: In case of merge conflicts, you
 can checkout the release branch in a new branch, e.g. /resolve-conflicts,
 fix the merge problems there, and then do a PR into main from the new
 branch. In that way, you still get all the commits in the release branch
 back intomain`, but leave the release branch alone.
 .
 To cut the patch version: • Create a branch on top of the release
 branch you want to use.• Cherry-pick the fixes from the main branch
 (or add new commits) to fix critical bugs for that patch release.•
 Follow steps 3-8 as above.
